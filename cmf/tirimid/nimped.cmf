DOC-TITLE nimped
DOC-AUTHOR tirimid
DOC-CREATED 2025-05-17
DOC-REVISED 2025-05-18

=Introduction

    nimped stands for (N)ew and (Imp)roved Text (Ed)itor. The reason for this,
is that it is my second personal text editor, improving upon medioed, which I
made public and posted about on social media over a year ago. If you are not
familiar with medioed, read about it @[medioed.html|here], or see the Reddit
post @[https://old.reddit.com/r/C_Programming/comments/1bqrf1i/text_editor_i_wrote_in_c/?ref=share&ref_source=link|here].

=How is it different from medioed?

    There are two main differences - simplifications and redesigns. In terms of
redesigns, the most significant is that it is now modal (albeit, with only two
real modes implemented). As for simplifications, I realized that a lot of what I
did with medioed was unnecessary and was a much worse idea than I initially
thought.
    For example, with medioed I thought that separating frames from buffers
would somehow be useful, enabling editing multiple places in a buffer at the
same time. I quickly realized that I never do this, and it doesn't really help
my workflow at all, but the damage was already done; and instead of redoing that
system from the ground up, I just implemented safeguards to stop the user from
making use of the capability. With this new text editor, I drew upon about a
year and a half of experience with medioed to avoid making these mistakes.
    There is now also a way to modify user configurations for stylistic things
like tab size and theme colors without having to recompile the program every
single time, as a dynamically loaded config file system was implemented.

=Installing nimped

    Clone the repository from GitHub and `cd` into it:

```
$ git clone https://git.tirimid.net/nimped
$ cd nimped
```

    Then, build the `nimped` binary:

```
$ ./build.sh
```

    After a successful build, you can install the binary to the system:

```
# ./install-bin.sh
```

    You will also need the user config installed to your `$HOME/.config`
directory in order to use nimped. Alternatively, you can use the `-o` option to
open configuration from a local directory. However, if you wish to install
config to your user home, run:

```
$ ./install-conf.sh
```

    (See the `README.md` file for information regarding installing themes and
uninstalling nimped from your system).

=Dynamically configuring nimped

    The user configuration can be installed to `$HOME/.config/nimped`. Inside,
you will find several conf files. Inspect these files for anything interesting;
in particular, you will find the following options in `layout.conf`:

```
margin = 80
tab = 2
```

    I point these out because these are probably the ones you'll most want to
change.

=Running nimped

    After installing nimped, you can run it through the command line. The usage
is as follows:

```
$ nimped [options] file1 file2 file3 ...
```

    For specific usage information and help with command line flags, run:

```
$ nimped -h
```

=Keybind cheatsheet

==Base mode

*`h`: Move left one character
*`l`: Move right one character
*`j`: Move down one line
*`k`: Move up one line
*`a`: Move to the start of the current line
*`e`: Move to the end of the current line
*`f`: Move forward one word
*`b`: Move backward one word
*`C-x`: Quit nimped
*`C-n`: Create a new scratch frame
*`C-f`: Create a frame from a file
*`C-k`: Kill the current frame
*`C-s`: Save the contents of the current frame to a file
*`n`: Goto the next frame
*`p`: Goto the previous frame
*`m`: Set the current frame as master
*`u`: Undo the last changes made to the frame
*`/`: Search the frame forwards for literal text
*`?`: Search the frame backwards for literal text
*`c`: Copy the current line
*`d`: Cut the current line
*`q c`: Copy a given number of lines
*`q d`: Cut a given number of lines
*`v`: Paste the clipboard contents
*`z`: Center the frame around the cursor
*`g`: Goto a given line
*`F3`: Start recording a macro
*`F4`: Stop recording / execute a macro
*`i`: Enter write mode

==Write mode

*`C-x`: Quit write mode
*`C-d`: Delete the character in front of the cursor
*`BACKSPC`: Delete the character behind the cursor (handling smart parens)
*`M-BACKSPC`: Delete the word behind the cursor
*`RET`: Insert a new line (handling indentation and smart parens)
*`(`: Insert a smart left-paren
*`[`: Insert a smart left-bracket
*`{`: Insert a smart left-brace
*`"`: Insert a smart double-quote

==Prompt mode

*`C-x`: Quit prompt with failure
*`RET`: Quit prompt with success
*`C-f`: Move right one character
*`C-b`: Move left one character
*`C-a`: Move to the start of the prompt
*`C-e`: Move to the end of the prompt
*`M-f`: Move forward one word
*`M-b`: Move backward one word
*`C-d`: Delete the character in front of the cursor
*`BACKSPC`: Delete the character behind the cursor (handling smart parens)
*`M-BACKSPC`: Delete the word behind the cursor
*`(`: Insert a smart left-paren
*`[`: Insert a smart left-bracket
*`{`: Insert a smart left-brace
*`"`: Insert a smart double-quote
